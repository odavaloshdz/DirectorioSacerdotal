// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?
  name          String?
  role          Role      @default(USER)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  priest   Priest?
}

model City {
  id        String   @id @default(cuid())
  name      String   @unique
  state     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parishes Parish[]

  @@map("cities")
}

model Parish {
  id        String   @id @default(cuid())
  name      String
  cityId    String
  address   String?
  phone     String?
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  city    City     @relation(fields: [cityId], references: [id], onDelete: Cascade)
  priests Priest[]

  @@unique([name, cityId])
  @@map("parishes")
}

model Specialty {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  priests PriestSpecialty[]

  @@map("specialties")
}

model PriestSpecialty {
  id          String @id @default(cuid())
  priestId    String
  specialtyId String

  priest    Priest    @relation(fields: [priestId], references: [id], onDelete: Cascade)
  specialty Specialty @relation(fields: [specialtyId], references: [id], onDelete: Cascade)

  @@unique([priestId, specialtyId])
  @@map("priest_specialties")
}

model Priest {
  id              String       @id @default(cuid())
  userId          String       @unique
  firstName       String
  lastName        String
  ordainedDate    DateTime?
  parishId        String?      // Now references Parish model
  phone           String?
  biography       String?
  profileImage    String?      // URL/path to profile image
  status          PriestStatus @default(PENDING)
  approvedAt      DateTime?
  approvedBy      String?      // Admin who approved
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  parish       Parish?             @relation(fields: [parishId], references: [id], onDelete: SetNull)
  specialties  PriestSpecialty[]
  suggestions  ProfileSuggestion[]

  @@map("priests")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  PRIEST
  ADMIN
}

model ProfileSuggestion {
  id          String                 @id @default(cuid())
  priestId    String
  field       String                 // Campo que se quiere cambiar
  currentValue String?               // Valor actual
  suggestedValue String             // Valor sugerido
  reason      String?                // Razón del cambio
  status      SuggestionStatus       @default(PENDING)
  reviewedBy  String?                // Admin que revisó
  reviewedAt  DateTime?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  priest Priest @relation(fields: [priestId], references: [id], onDelete: Cascade)

  @@map("profile_suggestions")
}

enum PriestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SuggestionStatus {
  PENDING
  APPROVED
  REJECTED
}
